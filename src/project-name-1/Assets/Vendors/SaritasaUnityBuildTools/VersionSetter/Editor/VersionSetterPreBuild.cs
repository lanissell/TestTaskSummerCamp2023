using System;
using System.IO;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEditor.Build;
using UnityEditor.Build.Reporting;
using UnityEngine;

namespace Saritasa.UBT.GitVersion
{
    /// <summary>
    /// App version setter.
    /// App version is generated based on the generated GitVersion asset.
    /// Build number is generated by number of minutes passed since Unix EPOCH time 
    /// and it is always unique.
    /// Note that for each platform app version is generated a little bit differently,
    /// for example on Android it is FullSemVersion and on iOS it is Major.Minor.Patch
    /// (because Apple doesn't support custom version string).
    /// Note: It is also worth noting that if you change the Bundle Version calculation strategy,
    /// the old Bundle Version may be larger than the new one.
    /// To avoid this situation, <see cref="VersionSetterPreBuild.BuildNumberOffset"/>
    /// </summary>
    [InitializeOnLoad]
    public class VersionSetterPreBuild : IPreprocessBuildWithReport
    {
        /// <inheritdoc/>
        public int callbackOrder => 0;

        /// <summary>
        /// BuildNumberOffset is needed if you have changed the build number calculation strategy on an existing project.
        /// On an existing project there is usually already a version, and Offest's job is to shift the build number value
        /// so that the new build number is always higher than that which used with the old build number calculation strategy.
        /// </summary>
        private const int BuildNumberOffset = 0;

        private const string GitVersionConfigFileName = "GitVersion.yml";

        private const string GitVersionTemplateConfigFilePath =
            "Assets/Vendors/SaritasaUnityBuildTools/VersionSetter/Editor/GitVersion_template.yml";

        /// <inheritdoc/>
        public void OnPreprocessBuild(BuildReport report)
        {
            var target = report.summary.platform;

            ApplyVisionOSVersion(target);
            ApplyIOSVersion(target);
            ApplyOSXVersion(target);

            ApplyAndroidVersion(target);
            ApplyWebGLVersion(target);
            ApplyWindowsVersion(target);
        }

        private void ApplyVisionOSVersion(BuildTarget target)
        {
#if UBT_VISIONOS_SUPPORT
            if (target == BuildTarget.VisionOS)
            {
                PlayerSettings.bundleVersion = GetAppVersion(false);
                PlayerSettings.visionOSBundleVersion = GetAppVersion(false);
                PlayerSettings.VisionOS.buildNumber = GetBuildNumberString();
            }
#else
            if (!Enum.TryParse<BuildTarget>("VisionOS", out var visionOs))
            {
                Debug.LogError("VisionOS does not exist in BuildTarget enum.");
                return;
            }

            if (target == visionOs)
            {
                Debug.LogError("Version was not applied! Use define UBT_VISIONOS_SUPPORT");
            }
#endif
        }

        private void ApplyIOSVersion(BuildTarget target)
        {
            if (target == BuildTarget.iOS)
            {
                PlayerSettings.bundleVersion = GetBundleVersion(false);
                PlayerSettings.iOS.buildNumber = GetBuildNumberString();
            }
        }

        private void ApplyOSXVersion(BuildTarget target)
        {
            if (target == BuildTarget.StandaloneOSX)
            {
                PlayerSettings.bundleVersion = GetBundleVersion(false);
                PlayerSettings.macOS.buildNumber = GetBuildNumberString();
            }
        }

        private void ApplyAndroidVersion(BuildTarget target)
        {
            if (target == BuildTarget.Android)
            {
                PlayerSettings.bundleVersion = GetBundleVersion(true);
                PlayerSettings.Android.bundleVersionCode = int.Parse(GetBuildNumberString());
            }
        }

        private void ApplyWindowsVersion(BuildTarget target)
        {
            if (target == BuildTarget.StandaloneWindows || target == BuildTarget.StandaloneWindows64)
            {
                PlayerSettings.bundleVersion = GetBundleVersion(true);
            }
        }

        private void ApplyWebGLVersion(BuildTarget target)
        {
            if (target == BuildTarget.WebGL)
            {
                PlayerSettings.bundleVersion = GetBundleVersion(true);
            }
        }

        private static string GetBundleVersion(bool needFullSemVer)
        {
            return needFullSemVer
                ? GitVersionAsset.Instance.GitVersion.FullSemVer
                : GitVersionAsset.Instance.GitVersion.MajorMinorPatch;
        }

        private static string GetBuildNumberString()
        {
            var totalMinutes = (int)(DateTime.UtcNow - DateTime.UnixEpoch).TotalMinutes;
            var buildNumber = totalMinutes + BuildNumberOffset;
            return buildNumber.ToString();
        }

        [MenuItem(UBT.BuildToolsMenuPath + "/VersionSetter/Create\\Validate GitVersion.yaml", false, 1)]
        private static void CreateOrValidateGitVersionFiles()
        {
            var reposRootDir = PathUtils.GetRepositoryRootPath();
            var currentConfigFilePath = reposRootDir.CombineAsPath(GitVersionConfigFileName);

            // 1. Check that GitVersion Template exists.
            if (!File.Exists(GitVersionTemplateConfigFilePath))
            {
                Debug.LogError("Template config file does not exist. Please unpack VersionSetter to Vendors.");
                return;
            }

            // 2. Check that current GitVersion.yaml for project exists.
            if (!File.Exists(currentConfigFilePath))
            {
                try
                {
                    // 2.1. Create file from template.
                    File.Copy(GitVersionTemplateConfigFilePath, currentConfigFilePath);
                    Debug.Log($"Created new GitVersion config at: {currentConfigFilePath}\n" +
                        $"Copied from template: {GitVersionTemplateConfigFilePath}");
                }
                catch (Exception ex)
                {
                    Debug.LogError($"Failed to copy GitVersion config: {ex.Message}\n" +
                        $"Template config: {GitVersionTemplateConfigFilePath}\n" +
                        $"Existing config: {currentConfigFilePath}");
                }
                return;
            }

            // 3. Validate existing GitVersion.yaml file with GitVersion Template.
            Debug.Log($"Start validating an existing GitVersion.yaml file with GitVersion Template...");

            string yamlContent1;
            string yamlContent2;
            try
            {
                yamlContent1 = File.ReadAllText(GitVersionTemplateConfigFilePath);
                yamlContent2 = File.ReadAllText(currentConfigFilePath);
            }
            catch (Exception ex)
            {
                Debug.LogError($"Failed to reading GitVersion configs: {ex.Message}\n" +
                    $"Template config: {GitVersionTemplateConfigFilePath}\n" +
                    $"Existing config: {currentConfigFilePath}");
                return;
            }

            if (yamlContent1 == yamlContent2)
            {
                Debug.Log("YAML files are identical.");
            }
            else
            {
                Debug.LogWarning("YAML files are different:\n" +
                    $"Template config: {GitVersionTemplateConfigFilePath}\n" +
                    $"Existing config: {currentConfigFilePath}");
            }
        }

        [MenuItem(UBT.BuildToolsMenuPath + "/VersionSetter/Show version", false, 0)]
        public static void ShowCurrentGitVersion()
        {
            GitVersionGenerator.CreateOrUpdateGitVersionAsset();

            var needFullSemVer = EditorUserBuildSettings.activeBuildTarget switch
            {
                BuildTarget.iOS => false,
                BuildTarget.StandaloneOSX => false,
                BuildTarget.Android => true,
                BuildTarget.StandaloneWindows => true,
                BuildTarget.StandaloneWindows64 => true,
                BuildTarget.WebGL => true,
                _ => throw new NotImplementedException()
            };

            var fullVersion = GetBundleVersion(needFullSemVer);
            var bundleVersion = GetBuildNumberString();

            var selectedIndex = EditorUtility.DisplayDialogComplex(
                "Version",
                $"Full version: {fullVersion}\nBundle version: {bundleVersion}",
                "Copy full version",
                "Cancel",
                "Copy bundle version");

            switch (selectedIndex)
            {
                case 0:
                    // Copy full version
                    EditorGUIUtility.systemCopyBuffer = fullVersion;
                    break;
                case 1:
                    // Cancel
                    // Do nothing
                    break;
                case 2:
                    // Copy bundle version
                    EditorGUIUtility.systemCopyBuffer = bundleVersion;
                    break;
                default: throw new NotImplementedException();
            }
        }
    }
}